#version 430 core

layout(binding = 2, rgba32f) uniform image2D framebuffer;       
layout(binding = 3, rgba32f) uniform image2D sqAvgBuffer;       
layout(binding = 4, r32ui) uniform uimage2D frameCountBuffer;

uniform sampler2D colorTexture;
uniform mat4 mat_inverse;
uniform mat4 persp_inverse;
uniform float lightIntensity;
uniform vec3 lightPosition;
uniform bool blinnPhong;
uniform bool transparent;
uniform float shininess;
uniform float eta;
uniform float radius;
uniform float groundDistance;
uniform vec3 center;

#define MAX_SCENE_BOUNDS    10.0
#define EPS                 0.000001

#define MIN_DISTANCE EPS
#define GROUND_VPTR -1

#define M_1_PI 0.31830988618

#define Ka 0.5
#define Kd 0.3

float PHI = 1.61803398874989484820459;  // Φ = Golden Ratio   

float gold_noise(in vec2 xy, in float seed){
       return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);
}

struct hitinfo_t {
    /* Index of the first index of the triangle */
    /* or: GROUND_VPTR */
    int hit_vptr;
    /* Intersection distance, barycentric coordinates */
    /* or: intersection distance, 0, texture coordinates (for the ground) */
    vec4 t;
};

struct BVHNode {
    vec4 min;
    vec4 max;
    int nbTriangles;
    int index;
};

layout (std430, binding = 1) buffer Vertices
{
    vec4 vertices[];
};

layout (std430, binding = 2) buffer Normals
{
    vec4 normals[];
};

layout (std430, binding = 3) buffer Colors
{
    vec4 colors[];
};

layout (std430, binding = 4) buffer Meshes
{
    int indices[];
};

layout (std430, binding = 5) buffer BVHNodes
{
    BVHNode nodes[];
};


// Check whether there is an intersection between the ray (origin, dir) and the bounding box (bbmin, bbmax), 
// stores into tNear the nearest point of intersection on the ray.
bool intersectBoundingBox(vec4 origin, vec4 dir, vec4 bbmin, vec4 bbmax, out float tNear)
{
	// intersect with BB:
    vec4 sMin = (bbmin - origin) / dir;
    vec4 sMax = (bbmax - origin) / dir;

    vec4 tMin = min(sMin, sMax);
    vec4 tMax = max(sMin, sMax);

    tNear = max(max(tMin.x, tMin.y), tMin.z);
    float tFar = min(min(tMax.x, tMax.y), tMax.z);

	if (tNear < 0) tNear = 0; // starting point inside the BVH
    return tNear <= tFar;
}

// intersect ray (origin, dir) with triangle defined by ptr (number inside indexed face set)
// returns a boolean, plus the "t" of hitinfo structure (Intersection distance, barycentric coordinates)
bool intersectTriangle(vec4 origin, vec4 dir, int ptr, out vec4 dist)
{
	// vertices from data:
    vec4 v0 = vertices[indices[ptr]];
    vec4 v1 = vertices[indices[ptr + 1]];
    vec4 v2 = vertices[indices[ptr + 2]];

    vec3 e1 = (v1 - v0).xyz;
    vec3 e2 = (v2 - v0).xyz;

    vec3 p = cross(dir.xyz, e2);
    float det = dot(e1, p);
    if (abs(det) < EPS) return false;

    // We do early exit here: as soon as we can return false, we do.
    // In my tests, it is faster than computing all coordinates, 
    // *then* checking validity with a single test. YMMV, feel free to test
    vec3 t = (origin - v0).xyz;
    dist.y = dot(t, p);
    if (dist.y < 0.0 || dist.y > det) return false;
    vec3 q = cross(t, e1);
    dist.z = dot(dir.xyz, q);
    if (dist.z < 0.0 || dist.z > det) return false;
    dist.w = det - dist.y - dist.z;
    if (dist.w < 0.0) return false;
    dist.x = dot(e2, q);
    dist /= det;
    return (dist.x > EPS);
}

bool intersectGround(vec4 origin, vec4 dir, out vec4 dist)
{
    if (abs(dir.y) < EPS)
        return false;
    float t = -(origin.y + groundDistance) / dir.y;

    if (t < MIN_DISTANCE)
        return false;

    vec4 point = origin + t * dir;
    point.y = -groundDistance;
    vec4 scaledPoint = point / radius ;
    vec2 texCoords = 0.5 * scaledPoint.xz + 0.5;

    dist = vec4(t, 0.0, texCoords);

    return true;
}

vec4 interpolateVertex(hitinfo_t h)
{
    if (vertices.length() > 0) {
		vec4 v0 = vertices[indices[h.hit_vptr]];
		vec4 v1 = vertices[indices[h.hit_vptr + 1]];
		vec4 v2 = vertices[indices[h.hit_vptr + 2]];
		return normalize(h.t.w * v0 + h.t.y * v1 + h.t.z * v2);
	} else return vec4(0.0, 0.0, 0.0, 1.0); // should not be even possible ?
}

vec4 interpolateColor(hitinfo_t h)
{
	if (colors.length() > 0) {
		vec4 c0 = colors[indices[h.hit_vptr]];
		vec4 c1 = colors[indices[h.hit_vptr + 1]];
		vec4 c2 = colors[indices[h.hit_vptr + 2]];
		return (h.t.w * c0 + h.t.y * c1 + h.t.z * c2);
	} else return vec4(0.7, 0.7, 0.7, 1.0);
}

vec4 interpolateNormal(hitinfo_t h)
{
    if (normals.length() > 0) {
		vec4 n0 = normals[indices[h.hit_vptr]];
		vec4 n1 = normals[indices[h.hit_vptr + 1]];
		vec4 n2 = normals[indices[h.hit_vptr + 2]];
		return normalize(h.t.w * n0 + h.t.y * n1 + h.t.z * n2);
	} else return vec4(0.5, 0.5, 0.5, 1.0);
}

// BVH-related functions:
bool isLeaf(BVHNode node)
{
    return node.nbTriangles != 0;
}

bool intersectBVHLeaf(BVHNode node, vec4 origin, vec4 dir, inout hitinfo_t h)
{
    bool hit = false;

    for (int i = 0; i < node.nbTriangles; ++i) {
        int vptr = 3 * (node.index + i);
        vec4 dist;
        if (intersectTriangle(origin, dir, vptr, dist) && dist.x < h.t.x) {
            hit = true;
            h.hit_vptr = vptr;
            h.t = dist;
        }
    }

    return hit;
}

bool intersectBVHLeaf(BVHNode node, vec4 origin, vec4 dir)
{
    for (int i = 0; i < node.nbTriangles; ++i) {
        int vptr = 3 * (node.index + i);
        vec4 dist;
        if (intersectTriangle(origin, dir, vptr, dist))
            return true;
    }

    return false;
}

#define MAX_STACK_SIZE 64

#define push(stack, size, value) stack[size++] = value
#define pop(stack, size) stack[--size]

bool intersectBVH(vec4 origin, vec4 dir, inout hitinfo_t h)
{
    int rootIndex = 0;
    BVHNode rootNode = nodes[rootIndex];
    float tNear;

    if (!intersectBoundingBox(origin, dir, rootNode.min, rootNode.max, tNear))
        return false;

    struct StackElement {
        int index;
        float t;
    } stack[MAX_STACK_SIZE];
    int size = 0;

    push(stack, size, StackElement(rootIndex, 0.0));

    bool hit = false;

    while (size != 0) {
        StackElement current = pop(stack, size);
        if (h.t.x < current.t)
            continue;

        BVHNode currentNode = nodes[current.index];
        if (isLeaf(currentNode)) {
            hit = intersectBVHLeaf(currentNode, origin, dir, h) || hit;
        } else {
            StackElement left = StackElement(current.index + 1, 0.0);
            BVHNode leftNode = nodes[left.index];
            bool hitLeft = intersectBoundingBox(origin, dir, leftNode.min, leftNode.max, left.t);

            StackElement right = StackElement(currentNode.index, 0.0);
            BVHNode rightNode = nodes[right.index];
            bool hitRight = intersectBoundingBox(origin, dir, rightNode.min, rightNode.max, right.t);

            if (hitLeft && hitRight) {
                if (left.t < right.t) {
                    push(stack, size, right);
                    push(stack, size, left);
                } else {
                    push(stack, size, left);
                    push(stack, size, right);
                }
            } else if (hitLeft) {
                push(stack, size, left);
            } else if (hitRight) {
                push(stack, size, right);
            }
        }
    }

    return hit;
}

bool intersectBVH(vec4 origin, vec4 dir)
{
    int rootIndex = 0;
    BVHNode rootNode = nodes[rootIndex];
    float tNear;

    if (!intersectBoundingBox(origin, dir, rootNode.min, rootNode.max, tNear))
        return false;

    int stack[MAX_STACK_SIZE];
    int size = 0;

    push(stack, size, rootIndex);

    while (size != 0) {
        int current = pop(stack, size);
        BVHNode currentNode = nodes[current];
        if (isLeaf(currentNode)) {
            if (intersectBVHLeaf(currentNode, origin, dir))
                return true;
        } else {
            int left = current + 1;
            BVHNode leftNode = nodes[left];
            bool hitLeft = intersectBoundingBox(origin, dir, leftNode.min, leftNode.max, tNear);

            int right = currentNode.index;
            BVHNode rightNode = nodes[right];
            bool hitRight = intersectBoundingBox(origin, dir, rightNode.min, rightNode.max, tNear);

            if (hitLeft && hitRight) {
                push(stack, size, right);
                push(stack, size, left);
            } else if (hitLeft) {
                push(stack, size, left);
            } else if (hitRight) {
                push(stack, size, right);
            }
        }
    }

    return false;
}
// End BVH-related functions

// Compute the first intersection along the ray (origin, dir). 
// returns the nearest intersection in h
bool firstIntersection(vec4 origin, vec4 dir, out hitinfo_t h)
{
    h.t.x = radius * MAX_SCENE_BOUNDS;

    bool hit = intersectBVH(origin, dir, h);

    vec4 dist;
    if (intersectGround(origin, dir, dist) && dist.x < h.t.x) {
        hit = true;
        h.hit_vptr = GROUND_VPTR;
        h.t = dist;
    }

	return hit;
}

// checks whether there is any intersection along the ray (origin, dir)
// Does not compute the nearest intersection, ends the loop as soon as an intersection is found.
bool isIntersected(vec4 origin, vec4 dir)
{
    vec4 dist;

    return intersectGround(origin, dir, dist) || intersectBVH(origin, dir);
}

// Local illumination related functions. TODO

/*
The key function is directIllumination(). It is called by trace() for each pixel of the screen that covers an object of the scene (we'll cover this in the ray-tracing lecture).

First, edit this function so that it computes local illumination using the Blinn-Phong model. Make it as modular as possible, so you can reuse code in future works, but also move code aside when you change lighting model.

You already have the point position, its color and the incoming viewing direction ​V​⃗​​. You will have to compute the shading normal ​n​⃗​​ and the vector to the light source ​L​⃗​​. 
*/

vec4 lightDirection(vec4 p)
{
    return normalize(vec4(lightPosition, 1) - p);
}

bool inShadow(vec4 p, vec4 n)
{
    vec4 lightDir = lightDirection(p);

    // Positive half-space of shading normal
    bool positiveHalfSpace = dot(n, lightDir) > 0;

    if (!positiveHalfSpace)
        return true;

    // No intersections toward light-source
    bool lightObstructed = isIntersected(p, lightDir); 

    return lightObstructed;
}

vec4 blinnPhongAmbient(vec4 color)
{
    return color * Ka * lightIntensity;
}

vec4 blinnPhongDiffuse(vec4 color, vec4 normal, vec4 lightDirection)
{
    return Kd * color * max(dot(normal, lightDirection), 0) * lightIntensity;
}

float fresnel(float cosTheta)
{
    float sinThetaSqrd = 1 - pow(cosTheta, 2);

    float ci = sqrt(pow(eta, 2) - sinThetaSqrd);

    float Fs = pow(abs((cosTheta - ci) / (cosTheta + ci)), 2);
    float Fp = pow(abs((pow(eta, 2) * cosTheta - ci) / (pow(eta, 2) * cosTheta + ci)), 2);  
    
    return (Fs + Fp) / 2;
}

vec4 halfVector(vec4 a, vec4 b)
{
    return normalize(a + b);
}

float blinnPhongBRDF( vec4 n, vec4 v, vec4 lightDirection) {
    vec4 H = halfVector(v, lightDirection);

    float cosTheta = dot(n, v);
    float frs = fresnel(cosTheta);

    return frs * pow(max(dot(n, H), 0), shininess) * lightIntensity;
}

vec4 blinnPhongSpecular(vec4 color, vec4 n, vec4 v, vec4 lightDirection)
{ 
    return color * blinnPhongBRDF(n, v, lightDirection);
}

vec4 blinnPhongColor(vec4 color, vec4 p, vec4 n, vec4 v)
{
    vec4 lightDirection = lightDirection(p);
    
    vec4 Ca = blinnPhongAmbient(color);
    vec4 Cd = blinnPhongDiffuse(color, n, lightDirection);
    vec4 Cs = blinnPhongSpecular(color, n, v, lightDirection);

    return Ca + Cd + Cs;
}

float G1(float cosTheta)
{
    float tanThetaSqrd = 1 / pow(cosTheta, 2) - 1;
    float alpha = shininess / 400;

    return 2 / (1 + sqrt(1 + pow(alpha, 2) * tanThetaSqrd));
}

float chi(float cosTheta) 
{
    float sinTheta = sqrt(1 - pow(cosTheta, 2));
    
    if (cosTheta >= 0 && cosTheta <= 1 && sinTheta >= 0 && sinTheta <= 1)
        return 1.0;
    else
        return 0.0;
}

float chi2(float cosTheta) 
{
    float cosThetaSqrd = pow(cosTheta, 2);
    float sinThetaSqrd = 1 - cosThetaSqrd;

    if (cosThetaSqrd >= 0 && cosThetaSqrd <= 1 &&
        sinThetaSqrd >= 0 && sinThetaSqrd <= 1) 
        return 1.0;
    else
        return 0.0;
}

float D(float cosTheta) 
{
    float tanThetaSqrd = 1 / pow(cosTheta, 2) - 1;
    float alphaSqrd = pow(shininess / 200, 2);
    float P22 = M_1_PI * alphaSqrd / (pow(alphaSqrd + tanThetaSqrd, 2));

    return (P22 * chi(cosTheta)) / pow(cosTheta, 4);
}

vec4 cookTorranceSpecular(vec4 color, vec4 p, vec4 n, vec4 v, vec4 lightDirection)
{
    vec4 i = lightDirection;
    vec4 o = v;
    vec4 h = halfVector(i, o);

    float cosThetaI = dot(i, n);
    float cosThetaO = dot(o, n);
    float cosThetaH = dot(h, n);
    float cosThetaD = dot(h, i);

    float Gi = G1(cosThetaI);
    float Go = G1(cosThetaO);

    float fresnel_d = fresnel(cosThetaD);

    float Dh = D(cosThetaH);

    return color * fresnel_d * Dh * Gi * Go / (4 * cosThetaI * cosThetaO);
}

vec4 cookTorranceColor(vec4 color, vec4 p, vec4 n, vec4 v)
{
    vec4 lightDirection = lightDirection(p);

    vec4 Ca = blinnPhongAmbient(color);
    vec4 Cd = blinnPhongDiffuse(color, n, lightDirection);
    vec4 Cs = cookTorranceSpecular(blinnPhongSpecular(color, n, v, lightDirection), p, n, v, lightDirection);

    return Ca + Cd + Cs;
}

vec4 directIllumination(vec4 color, vec4 p, vec4 n, vec4 v)
{
	// Goal: compute direct illumination at point p, from the light source at lightPosition.
	// color: local material color, RGBA
	// p: coordinates of intersection point, xyzw
	// n: normal at intersection point, xyzw
	// v: incoming viewing direction. Points towards the eye.
  //  if (blinnPhong) 
  //      return blinnPhongColor(color, p, n, v);
  //  else 
  //      return cookTorranceColor(color, p, n, v);


    // TODO figure out how adjust point randomly  
    // vec4 adjustedPoint = p + 0.01;
    bool isInShadow = inShadow(p, n);

    if (isInShadow) {
        return blinnPhongAmbient(color);
    } else {
        //  full lighting model
      if (blinnPhong) 
          return blinnPhongColor(color, p, n, v);
      else 
          return cookTorranceColor(color, p, n, v);
    }
}

const int MAX_TRACE = 5;

void getLocal(vec4 origin, vec4 dir, hitinfo_t h, out vec4 color, out vec4 p, out vec4 n)
{
    p = origin + h.t.x * dir;
    if (h.hit_vptr == GROUND_VPTR) {
        color = texture(colorTexture, h.t.pq);
        p.y = -groundDistance;
        n = vec4(0.0, 1.0, 0.0, 0.0);
    } else {
        color = interpolateColor(h);
        n = interpolateNormal(h);
    }
}


struct trace_state_t
{
    vec4 origin;  // start of ray
    vec4 dir;     // direction
    vec4 color;   // color after multiple bounces
    vec4 localColor;   // color of the material (after interpolation)
    hitinfo_t h;  // what the ray hits (triangle Id, u, v, lambda)
    vec4 hit;     // point the ray hits 
    vec4 Ld;      // direction to light at destination
    vec4 N;       // normal at destination
};

vec4 trace(vec4 origin, vec4 dir)
{
    // These variables are for TP2
    trace_state_t stack[MAX_TRACE + 1];
    bool fallback[MAX_TRACE + 1];
    int sp = 0;

    // TODO 2) Forward tracing: for each ray, compute the intersection, 
    // store the intersection, compute the bouncing ray, 
    // iterate until the ray does not intersect anything or until you have reached the maximum number of bounces. 

    // corner case
    stack[0].origin = origin;
    stack[0].dir = dir;

    // int last_bounce = 0;

    // for (int i = 0; i < MAX_TRACE; i++)
    while (sp < MAX_TRACE)
    {
        hitinfo_t hl;
        bool intersection = firstIntersection(stack[sp].origin, stack[sp].dir, stack[sp].h);

        // shall we compute this before breaking the loop otherwise ?
        getLocal(stack[sp].origin, stack[sp].dir, stack[sp].h, stack[sp].localColor, stack[sp].hit, stack[sp].N);

        stack[sp].Ld = lightDirection(stack[sp].hit);

        // ray bounces into infinity ?
        if (!intersection) { 
            break;
        }

        stack[sp + 1].origin = stack[sp].hit;

        // 100% mirror
        stack[sp + 1].dir = reflect(stack[sp].dir, stack[sp].N);
        sp++;   
    }

    //TODO 3) Backward color computing: you can now compute the ray color. 
    // Start by computing the color for the last point hit (the one further from the eye),
    // using direct illumination and a shadow ray, then move down the stack.
    // At each point, you have to compute the direct lighting using a shadow ray,
    // and combine it with indirect lighting (what you have computed so far). 

   // going to void
    if (sp == 0) {
        return vec4(0, 0, 0, 1);
    }

    stack[sp].color = directIllumination(stack[sp].localColor, 
                                        stack[sp].hit,
                                        stack[sp].N, -stack[sp].dir);

    float reflectivity = 0.6;

    for (int i = sp - 1; i >= 0; i--)
    {
        vec4 direct = directIllumination(stack[i].localColor, stack[i].hit, stack[i].N, -stack[i].dir);

        // stack[i].color = stack[i].localColor * stack[i + 1].color + direct;

        stack[i].color = stack[i].localColor * (1 - reflectivity) * stack[i + 1].color + reflectivity * direct;
    }

    return stack[0].color;
}

layout (local_size_x = 8, local_size_y = 8) in;
void main(void) {
    // Convert local screen coordinates into world coordinates
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);

    uint frameCount = imageLoad(frameCountBuffer, pix).r + 1;
    
    vec2 noised_pix = pix + gold_noise(pix, frameCount) - 0.5;

    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }
    
    vec2 pos = noised_pix / (size - vec2(0.5, 0.5));
    pos = 2 * pos - vec2(1., 1.);

    // Calculate ray direction
    vec4 worldPos = vec4(pos.x, pos.y, 1.0, 1.0);
    worldPos = persp_inverse * worldPos;
    worldPos /= worldPos.w;
    worldPos.w = 0;
    worldPos = normalize(worldPos);
    vec4 dir = normalize((mat_inverse * worldPos));
    vec4 eye = (mat_inverse * vec4(0, 0, 0, 1));

    // Load previous values and increment counter
    vec4 oldColor = imageLoad(framebuffer, pix);
    vec4 oldSqAvg = imageLoad(sqAvgBuffer, pix);

    // Check variance, return if low
    vec4 variance = oldSqAvg - oldColor * oldColor;
    vec4 stdDev = sqrt(max(variance, 0.0));

// Framecounter is always 0 or 1
    // if (frameCount > 1 && all(lessThan(stdDev.rgb, (0.1 * oldColor).rgb))) {
    //     //return; 
    //     imageStore(framebuffer, pix, vec4(255, 255, 255, 1));
    //     return;
    // }

    // Trace ray and get color
    vec4 color = trace(eye, dir);

    // imageStore(framebuffer, pix, oldColor + color);
    vec4 newColor = ((frameCount - 1) * oldColor + color) / float(frameCount);
    vec4 newSqAvg = ((frameCount - 1) * oldSqAvg + color * color) / float(frameCount);

    imageStore(framebuffer, pix, newColor);
    imageStore(sqAvgBuffer, pix, newSqAvg);
    imageStore(frameCountBuffer, pix, uvec4(frameCount));
}